package runtime

import (
	"github.com/Joystream/tinygo-wasm-substrate/srcore/primitives"
	"github.com/Joystream/tinygo-wasm-substrate/srcore/srprimitives"
	"github.com/Joystream/tinygo-wasm-substrate/srml/metadata"
	"github.com/Joystream/tinygo-wasm-substrate/srml/support"
	"github.com/Joystream/tinygo-wasm-substrate/srml/system"
)

// While in Rust implementation of SRML this is an enum generated by a
// construct_runtime macro, in Go we have to assemble the Runtime at runtime.

// Runtime is the object encapsulating your whole application.
// It is configured by the specifications of type parameters and plugged in modules.
type Runtime struct {
	Modules         []ModuleAndFlags
	ModulesWithCall []support.Module
	System          system.Module
	TypeParams      support.TypeParamsFactory
}

// Corresponds to "Call" enum generated for Rust runtime
type RuntimeCall struct {
	moduleIndex byte
	moduleCall  srprimitives.Callable
}

func (r RuntimeCall) Dispatch(o srprimitives.Origin) error {
	return r.moduleCall.Dispatch(o)
}

func (r *Runtime) ModuleForCall(call RuntimeCall) support.Module {
	return r.ModulesWithCall[call.moduleIndex]
}

func (c RuntimeCall) EncodeableEnum() primitives.EncodeableEnum {
	return primitives.EncodeableEnum{c.moduleIndex, c.moduleCall.EncodeableEnum()}
}

// Determines what types we import from the module.
// Similar to module lines in construct_module! macro.
type ModuleFlags struct {
	Module   bool
	Call     bool
	Storage  bool
	Event    bool
	Origin   bool
	Config   bool
	Log      string
	Inherent string
}

func DefaultPlus(mf ModuleFlags) ModuleFlags {
	mf.Module = true
	mf.Call = true
	mf.Storage = true
	mf.Event = true
	mf.Config = true
	return mf
}

type ModuleAndFlags struct {
	Module support.Module
	Flags  ModuleFlags
}

func RegisterModule(r Runtime, m support.Module, f ModuleFlags) {
	m.InitForRuntime(r.TypeParams)
	r.Modules = append(r.Modules, ModuleAndFlags{m, f})
	if f.Call {
		r.ModulesWithCall = append(r.ModulesWithCall, m)
	}
	sm, ok := m.(*system.Module)
	if ok {
		r.System = *sm
	}
}

func (r Runtime) GetMetadata() metadata.RuntimeMetadata {
	return metadata.RuntimeMetadata{}
}
